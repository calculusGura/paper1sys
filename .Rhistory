plotData <- cbind(plotData,pa);
browser();
plotData = plotData[order(plotData$x,decreasing=TRUE),]
plotData[which(!duplicated(cummax(plotData$y))),"pa"] <- 1
plotData = test[order(test$y,decreasing=TRUE),]
plotData[which(!duplicated(cummax(plotData$z))),"pa"] <- 1
plotData = test[order(test$z,decreasing=TRUE),]
plotData[which(!duplicated(cummax(plotData$x))),"pa"] <- 1
return(plotData)
}
findParetoFrontier(test)
test <- matrix(0, ncol=3, nrow= 100);
test <- as.data.frame(test);
test[,1] <- paste0("P",1:nrow(test));
test[,2] <- runif(100, min=0, max=100);
test[,3] <- runif(100, min=0, max=100);
test[,4] <- runif(100, min=0, max=100);
colnames(test) <- c("name", "x", "y","z");
### find Pareto frontier
findParetoFrontier <- function(plotData){
pa <- matrix(0, nrow= nrow(plotData));
plotData <- cbind(plotData,pa);
browser();
plotData = plotData[order(plotData$x,decreasing=TRUE),]
plotData[which(!duplicated(cummax(plotData$y))),"pa"] <- 1
plotData = test[order(test$y,decreasing=TRUE),]
plotData[which(!duplicated(cummax(plotData$z))),"pa"] <- 1
plotData = test[order(test$z,decreasing=TRUE),]
plotData[which(!duplicated(cummax(plotData$x))),"pa"] <- 1
return(plotData)
}
findParetoFrontier(test)
plotData
plotData = plotData[order(plotData$x,decreasing=TRUE),]
plotData[which(!duplicated(cummax(plotData$y))),"pa"] <- 1
plotData
test <- matrix(0, ncol=3, nrow= 100);
test <- as.data.frame(test);
test[,1] <- paste0("P",1:nrow(test));
test[,2] <- runif(100, min=0, max=100);
test[,3] <- runif(100, min=0, max=100);
test[,4] <- runif(100, min=0, max=100);
colnames(test) <- c("name", "x", "y","z");
### find Pareto frontier
findParetoFrontier <- function(plotData){
pa <- matrix(0, nrow= nrow(plotData));
plotData <- cbind(plotData,pa);
browser();
plotData = plotData[order(plotData$x,decreasing=TRUE),]
plotData[which(!duplicated(cummax(plotData$y))),"pa"] <- 1
plotData = test[order(test$y,decreasing=TRUE),]
plotData[which(!duplicated(cummax(plotData$z))),"pa"] <- 1
plotData = test[order(test$z,decreasing=TRUE),]
plotData[which(!duplicated(cummax(plotData$x))),"pa"] <- 1
return(plotData)
}
findParetoFrontier(test)
#test case
test <- matrix(0, ncol=3, nrow= 100);
test <- as.data.frame(test);
test[,1] <- paste0("P",1:nrow(test));
test[,2] <- runif(100, min=0, max=100);
test[,3] <- runif(100, min=0, max=100);
test[,4] <- runif(100, min=0, max=100);
colnames(test) <- c("name", "x", "y","z");
### find Pareto frontier
findParetoFrontier <- function(plotData){
pa <- matrix(0, nrow= nrow(plotData));
plotData <- cbind(plotData,pa);
plotData = plotData[order(plotData$x,decreasing=TRUE),]
plotData[which(!duplicated(cummax(plotData$y))),"pa"] <- 1
plotData = test[order(test$y,decreasing=TRUE),]
plotData[which(!duplicated(cummax(plotData$z))),"pa"] <- 1
plotData = test[order(test$z,decreasing=TRUE),]
plotData[which(!duplicated(cummax(plotData$x))),"pa"] <- 1
browser();
return(plotData)
}
a <- findParetoFrontier(test)
plotData
#test case
test <- matrix(0, ncol=3, nrow= 100);
test <- as.data.frame(test);
test[,1] <- paste0("P",1:nrow(test));
test[,2] <- runif(100, min=0, max=100);
test[,3] <- runif(100, min=0, max=100);
test[,4] <- runif(100, min=0, max=100);
colnames(test) <- c("name", "x", "y","z");
### find Pareto frontier
findParetoFrontier <- function(plotData){
pa <- matrix(0, nrow= nrow(plotData));
plotData <- cbind(plotData,pa);
plotData = plotData[order(plotData$x,decreasing=TRUE),]
plotData[which(!duplicated(cummax(plotData$y))),"pa"] <- 1
plotData = plotData[order(plotData$y,decreasing=TRUE),]
plotData[which(!duplicated(cummax(plotData$z))),"pa"] <- 1
plotData = plotData[order(plotData$z,decreasing=TRUE),]
plotData[which(!duplicated(cummax(plotData$x))),"pa"] <- 1
return(plotData)
}
findParetoFrontier(test)
#test case
test <- matrix(0, ncol=3, nrow= 100);
test <- matrix(0, ncol=3, nrow= 100);
test <- as.data.frame(test);
test[,1] <- paste0("P",1:nrow(test));
test[,2] <- runif(100, min=0, max=100);
test[,3] <- runif(100, min=0, max=100);
test[,4] <- runif(100, min=0, max=100);
colnames(test) <- c("name", "x", "y","z");
### find Pareto frontier
findParetoFrontier <- function(plotData){
pa <- matrix(0, nrow= nrow(plotData));
plotData <- cbind(plotData,pa);
plotData = plotData[order(plotData$x,decreasing=TRUE),]
plotData[which(!duplicated(cummax(plotData$y))),"pa"] <- 1
plotData = plotData[order(plotData$y,decreasing=TRUE),]
plotData[which(!duplicated(cummax(plotData$z))),"pa"] <- 1
plotData = plotData[order(plotData$z,decreasing=TRUE),]
plotData[which(!duplicated(cummax(plotData$x))),"pa"] <- 1
return(plotData)
}
a<- findParetoFrontier(test)
plot_ly(a, x = ~x, y = ~y, z = ~z,
marker = list(size =2,  #plotSize
color = ~pa,
showscale = TRUE))
#test case
test <- matrix(0, ncol=3, nrow= 100);
test <- as.data.frame(test);
test[,1] <- paste0("P",1:nrow(test));
test[,2] <- runif(100, min=0, max=100);
test[,3] <- runif(100, min=0, max=100);
test[,4] <- runif(100, min=0, max=100);
colnames(test) <- c("name", "x", "y","z");
### find Pareto frontier
findParetoFrontier <- function(plotData){
pa <- matrix(0, nrow= nrow(plotData));
plotData <- cbind(plotData,pa);
plotData = plotData[order(plotData$x,decreasing=TRUE),]
plotData[which(!duplicated(cummax(plotData$y))),"pa"] <- 1
plotData = plotData[order(plotData$y,decreasing=TRUE),]
plotData[which(!duplicated(cummax(plotData$z))),"pa"] <- 1
plotData = plotData[order(plotData$z,decreasing=TRUE),]
plotData[which(!duplicated(cummax(plotData$x))),"pa"] <- 1
return(plotData)
}
pareto<- findParetoFrontier(test)
plot_ly(pareto, x = ~x, y = ~y, z = ~z,
marker = list(size =2,  #plotSize
color = ~pa,
showscale = TRUE))
plot_ly(pareto, x = ~x, y = ~y, z = ~z,
marker = list(size =10,  #plotSize
color = ~pa,
showscale = TRUE))
plot_ly(pareto, x = ~x, y = ~y, z = ~z)
figure <- plot_ly(pareto, x = ~x, y = ~y, z = ~z);
figure <- add_markers(figure, color = ~pa, colors = c('gray', 'red'));
fiure
figure
showChangeRiskMatrix <- function(impact, likelihood){
entities <- nrow(impact)
x1 <-NULL; x2 <-NULL;
y1 <-NULL; y2 <-NULL;
x=seq(0.5, (entities - 0.5), 1);
y=seq((entities - 0.5), 0.5, -1);
for(i in 1:entities){
x1 <- c(x1,rep(x[i], entities));
x2 <- c(x2,x[i]+likelihood[,i]);
y1 <- c(y1, y);
y2 <- c(y2, y+impact[,i])
}
cells <- data.frame(x1,x2,y1,y2);
risk <- (cells[,2] - cells[,1]) * (cells[,4] - cells[,3]);
risk[which((risk>=0) & (risk<=0.3))] <- "green";
risk[which((risk>0.3) & (risk<=0.55))] <- "yellow";
risk[which((risk>0.55) & (risk<=1))] <- "red";
cells <- cbind(cells, risk);
diagCell <- as.matrix(impact);
diagCell[,] <- 0;
diagCell[seq(1,length(diagCell), (entities+1))] <- 1
graph <- graph_from_adjacency_matrix(diagCell, mode="directed", diag=TRUE);
node_list <- get.data.frame(graph, what = "vertices");
edge_list <- get.data.frame(graph, what = "edges");
all_nodes <- node_list$name;
plot_data <- edge_list %>% mutate(
to = factor(to, levels = rev(all_nodes)),
from = factor(from, levels = all_nodes));
ggplot(plot_data, aes(x = from, y = to), fill="white", alpha=0) +
geom_raster() +
theme_bw() +
geom_vline(xintercept=seq(0.5, entities+0.5, 1), lwd=0.5, colour="grey") +
geom_hline(yintercept=seq(0.5, entities+0.5, 1), lwd=0.5, colour="grey") +
scale_x_discrete(position = "top", drop = FALSE) +
scale_y_discrete(drop = FALSE) +
geom_rect(data = cells,
aes(xmin = x1, xmax = x2, ymin = y2, ymax = y1),
alpha = .7, inherit.aes = FALSE, fill=risk) +
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 90, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
panel.grid.major = element_blank(),
# Hide the legend (optional)
legend.position = "none")
}
showChangeRiskMatrix(impact, likelihood)
###################test case
impact <- read.csv("impact.csv");
likelihood <- read.csv("likelihood.csv");
rownames(impact) <- impact[,1]
impact <- impact[,-1]
rownames(likelihood) <- likelihood[,1]
likelihood <- likelihood[,-1]
showChangeRiskMatrix(impact, likelihood)
impact <- read.csv("impact.csv");
##initialize environment
setwd("/home/buzzsongs/paper1sys"); ##the working directory for chrome OS
rm(list = ls()); ##initialize memory
#source("./setEnvirionment.R"); ##install required packages
source("./dataClasses.R"); ##define data classes for modeling
##import data from CSV
csvData1 <- read.csv("./systemData/compDPstructure.csv");
csvData2 <- read.csv("./systemData/constDP.csv");
##generate system model from the csv data
source("./generateSystemModel.R");
systemData <- generateEntityDPModel(csvData1);
systemData <- generateConstDPModel(csvData2, systemData);
networkData <- calculateSystemNetwork(systemData);
##visualize the network of a system information
source("./networkView.R");
showSystemNetwork(systemData);
networkData <- calculateSystemNetwork(systemData);
networkData <- calculateSystemNetwork(systemData);
networkData
networkData$nodes
data <- toVisNetworkData(networkData)
library(visNetwork)
visIgraph(igraph_network)
data <- toVisNetworkData(networkData)
data
visNetwork::visIgraphLayout(
visNetwork(nodes = data$nodes, edges = data$edges) %>%
visNodes(#shape = "square",
color = list(background = "lightblue",
border = "darkblue",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 10))
)
data1 <- data1
data1 <- data
data
rownames(data$nodes)
colnames(data$nodes)
data$nodes[,-5]
data <- data$nodes[,-5]
visNetwork::visIgraphLayout(
visNetwork(nodes = data$nodes, edges = data$edges) %>%
visNodes(#shape = "square",
color = list(background = "lightblue",
border = "darkblue",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 10))
)
visNetwork::visIgraphLayout(
visNetwork(nodes = data1$nodes, edges = data1$edges) %>%
visNodes(#shape = "square",
color = list(background = "lightblue",
border = "darkblue",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 10))
)
data <- data1[,-1]
data1
data <- data1@nodes[,-1]
data <- data1
data$nodes
data$nodes <- data$nodes[,-5]
visNetwork::visIgraphLayout(
visNetwork(nodes = data$nodes, edges = data$edges) %>%
visNodes(#shape = "square",
color = list(background = "lightblue",
border = "darkblue",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 10))
)
rownames(data$nodes)
rownames(data$nodes) <- 1
row.names(data$nodes) <- 1
row.names(data$nodes) <- na
row.names(data$nodes) <- NA
data$nodes
data$nodes <- data$nodes[,-1]
data$nodes
visNetwork::visIgraphLayout(
visNetwork(nodes = data$nodes, edges = data$edges) %>%
visNodes(#shape = "square",
color = list(background = "lightblue",
border = "darkblue",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 10))
)
data <- data1
rownames(data$nodes)
(data$nodes)[1-2,]
data@nodes <- data@nodes[,-2]
data@nodes
data<-data1
data
data$nodes
data$nodes <-data@nodes[,-2]
data@nodes[,-2]
data@nodes
data <-data1
data$nodes
data$nodes <- data$nodes[,-2]
data@nodes
data <-data1
data$nodes[,-2]
data@nodes <- data$nodes[,-2]
data1
data1$nodes
data1$nodes(c(1,2),)
data1$nodes[c(1,2),]
data1$nodes[,c(1,2)]
data1$nodes[,c(1,3,5)]
data@nodes <- data1$nodes[,c(1,3,5)]
data
visNetwork::visIgraphLayout(
visNetwork(nodes = data$nodes[,c(1,3,5)], edges = data$edges) %>%
visNodes(#shape = "square",
color = list(background = "lightblue",
border = "darkblue",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 10))
)
systemData
data@nodes
data <- data1
data
data@nodes
data <- data1
data$nodes
nodes <- data.frame(id = 1:10,
label = paste("Node", 1:10),                                 # add labels on nodes
group = c("GrA", "GrB"),                                     # add groups on nodes
value = 1:10,                                                # size adding value
shape = c("square", "triangle", "box", "circle", "dot", "star",
"ellipse", "database", "text", "diamond"),                   # control shape of nodes
title = paste0("<p><b>", 1:10,"</b><br>Node !</p>"),         # tooltip (html or character)
color = c("darkred", "grey", "orange", "darkblue", "purple"),# color
shadow = c(FALSE, TRUE, FALSE, TRUE, TRUE))                  # shadow
head(nodes)
edges <- data.frame(from = sample(1:10, 8), to = sample(1:10, 8),
label = paste("Edge", 1:8),                                 # add labels on edges
length = c(100,500),                                        # length
arrows = c("to", "from", "middle", "middle;to"),            # arrows
dashes = c(TRUE, FALSE),                                    # dashes
title = paste("Edge", 1:8),                                 # tooltip (html or character)
smooth = c(FALSE, TRUE),                                    # smooth
shadow = c(FALSE, TRUE, FALSE, TRUE))                       # shadow
head(edges)
visNetwork(nodes, edges, width = "100%")
visNetwork::visIgraphLayout(
visNetwork(nodes, edges, width = "100%"))
nodes <- data.frame(id = 1:5, group = c(rep("A", 2), rep("B", 3)))
edges <- data.frame(from = c(2,5,3,3), to = c(1,2,4,2))
visNetwork(nodes, edges, width = "100%") %>%
visNodes(shape = "square") %>%                        # square for all nodes
visEdges(arrows ="to") %>%                            # arrow "to" for all edges
visGroups(groupname = "A", color = "darkblue") %>%    # darkblue for group "A"
visGroups(groupname = "B", color = "red")             # red for group "B"
visNetwork(nodes, edges, width = "100%") %>%
#visNodes(shape = "square") %>%                        # square for all nodes
visEdges(arrows ="to") %>%                            # arrow "to" for all edges
visGroups(groupname = "A", color = "darkblue", shape = "square") %>%    # darkblue for group "A"
visGroups(groupname = "B", color = "red", shape = "triangle")             # red for group "B"
visNetwork::visIgraphLayout(
visNetwork(nodes, edges, width = "100%") %>%
#visNodes(shape = "square") %>%                        # square for all nodes
visEdges(arrows ="to") %>%                            # arrow "to" for all edges
visGroups(groupname = "A", color = "darkblue", shape = "square") %>%    # darkblue for group "A"
visGroups(groupname = "B", color = "red", shape = "triangle")             # red for group "B"
)
visNetwork::visIgraphLayout(
visNetwork(nodes, edges, width = "100%") %>%
#visNodes(shape = "square") %>%                        # square for all nodes
visEdges(arrows ="to") %>%                            # arrow "to" for all edges
visGroups(groupname = "A", color = "darkblue", shape = "square") %>%    # darkblue for group "A"
visGroups(groupname = "B", color = "red", shape = "triangle")             # red for group "B"
%>% visLegend()
)
nodes <- data.frame(id = 1:5, group = c(rep("A", 2), rep("B", 3)))
edges <- data.frame(from = c(2,5,3,3), to = c(1,2,4,2))
visNetwork::visIgraphLayout(
visNetwork(nodes, edges, width = "100%") %>%
#visNodes(shape = "square") %>%                        # square for all nodes
visEdges(arrows ="to") %>%                            # arrow "to" for all edges
visGroups(groupname = "A", color = "darkblue", shape = "square") %>%    # darkblue for group "A"
visGroups(groupname = "B", color = "red", shape = "triangle")             # red for group "B"
%>% visLegend()
%>%  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE)
)
nodes <- data.frame(id = 1:5, group = c(rep("A", 2), rep("B", 3)))
edges <- data.frame(from = c(2,5,3,3), to = c(1,2,4,2))
visNetwork::visIgraphLayout(
visNetwork(nodes, edges, width = "100%") %>%
#visNodes(shape = "square") %>%                        # square for all nodes
visEdges(arrows ="to") %>%                            # arrow "to" for all edges
visGroups(groupname = "A", color = "darkblue", shape = "square") %>%    # darkblue for group "A"
visGroups(groupname = "B", color = "red", shape = "triangle")             # red for group "B"
%>% visLegend() %>%
visOptions(nodesIdSelection = TRUE)
)
visNetwork::visIgraphLayout(
visNetwork(nodes, edges, width = "100%") %>%
#visNodes(shape = "square") %>%                        # square for all nodes
visEdges(arrows ="to") %>%                            # arrow "to" for all edges
visGroups(groupname = "A", color = "darkblue", shape = "square") %>%    # darkblue for group "A"
visGroups(groupname = "B", color = "red", shape = "triangle")             # red for group "B"
%>% visLegend() %>%
visOptions(nodesIdSelection = TRUE)%>%
visInteraction(navigationButtons = TRUE)
)
nodes <- data.frame(id = 1:5, group = c(rep("A", 2), rep("B", 3)))
edges <- data.frame(from = c(2,5,3,3), to = c(1,2,4,2))
visNetwork::visIgraphLayout(
visNetwork(nodes, edges, width = "100%") %>%
#visNodes(shape = "square") %>%                        # square for all nodes
visEdges(arrows ="to") %>%                            # arrow "to" for all edges
visGroups(groupname = "A", color = "darkblue", shape = "square") %>%    # darkblue for group "A"
visGroups(groupname = "B", color = "red", shape = "triangle")             # red for group "B"
%>% visLegend() %>%
visOptions(nodesIdSelection = TRUE)%>%
visInteraction(navigationButtons = TRUE)%>%
visOptions(manipulation = TRUE)
)
nodes <- data.frame(id = 1:5, group = c(rep("A", 2), rep("B", 3)))
edges <- data.frame(from = c(2,5,3,3), to = c(1,2,4,2))
visNetwork::visIgraphLayout(
visNetwork(nodes, edges, width = "100%") %>%
#visNodes(shape = "square") %>%                        # square for all nodes
visEdges(arrows ="to") %>%                            # arrow "to" for all edges
visGroups(groupname = "A", color = "darkblue", shape = "square") %>%    # darkblue for group "A"
visGroups(groupname = "B", color = "red", shape = "triangle")             # red for group "B"
%>% visLegend() %>%
visOptions(nodesIdSelection = TRUE)%>%
visInteraction(navigationButtons = TRUE)%>%
)
nodes <- data.frame(id = 1:5, group = c(rep("A", 2), rep("B", 3)))
edges <- data.frame(from = c(2,5,3,3), to = c(1,2,4,2))
visNetwork::visIgraphLayout(
visNetwork(nodes, edges, width = "100%") %>%
#visNodes(shape = "square") %>%                        # square for all nodes
visEdges(arrows ="to") %>%                            # arrow "to" for all edges
visGroups(groupname = "A", color = "darkblue", shape = "square") %>%    # darkblue for group "A"
visGroups(groupname = "B", color = "red", shape = "triangle")             # red for group "B"
%>% visLegend() %>%
visOptions(nodesIdSelection = TRUE)%>%
visInteraction(navigationButtons = TRUE)
)
nodes <- data.frame(id = 1:5, group = c(rep("A", 2), rep("B", 3)))
edges <- data.frame(from = c(2,5,3,3), to = c(1,2,4,2))
visNetwork::visIgraphLayout(
visNetwork(nodes, edges, width = "100%") %>%
#visNodes(shape = "square") %>%                        # square for all nodes
visEdges(arrows ="to") %>%                            # arrow "to" for all edges
visGroups(groupname = "A", color = "darkblue", shape = "square") %>%    # darkblue for group "A"
visGroups(groupname = "B", color = "darkred", shape = "triangle")             # red for group "B"
%>% visLegend() %>%
visOptions(nodesIdSelection = TRUE)%>%
visInteraction(navigationButtons = TRUE)
)
nodes <- data.frame(id = 1:5, group = c(rep("A", 2), rep("B", 3)))
edges <- data.frame(from = c(2,5,3,3), to = c(1,2,4,2))
visNetwork::visIgraphLayout(
visNetwork(nodes, edges, width = "100%") %>%
#visNodes(shape = "square") %>%                        # square for all nodes
#visEdges(arrows ="to") %>%                            # arrow "to" for all edges
visGroups(groupname = "A", color = "darkblue", shape = "square") %>%    # darkblue for group "A"
visGroups(groupname = "B", color = "darkred", shape = "triangle")             # red for group "B"
%>% visLegend() %>%
visOptions(nodesIdSelection = TRUE)%>%
visInteraction(navigationButtons = TRUE)
)
nodes <- data.frame(id = 1:5, group = c(rep("A", 2), rep("B", 3)))
edges <- data.frame(from = c(2,5,3,3), to = c(1,2,4,2))
visNetwork::visIgraphLayout(
visNetwork(nodes, edges, width = "100%") %>%
#visNodes(shape = "square") %>%                        # square for all nodes
#visEdges(arrows ="to") %>%                            # arrow "to" for all edges
visGroups(groupname = "A", color = "darkblue", shape = "dot") %>%    # darkblue for group "A"
visGroups(groupname = "B", color = "darkred", shape = "box")             # red for group "B"
%>% visLegend() %>%
visOptions(nodesIdSelection = TRUE)%>%
visInteraction(navigationButtons = TRUE)
)
nodes <- data.frame(id = 1:5, group = c(rep("A", 2), rep("B", 3)))
edges <- data.frame(from = c(2,5,3,3), to = c(1,2,4,2))
visNetwork::visIgraphLayout(
visNetwork(nodes, edges, width = "100%") %>%
#visNodes(shape = "square") %>%                        # square for all nodes
#visEdges(arrows ="to") %>%                            # arrow "to" for all edges
visGroups(groupname = "A", color = "darkblue", shape = "dot") %>%    # darkblue for group "A"
visGroups(groupname = "B", color = "darkred", shape = "star")             # red for group "B"
%>% visLegend() %>%
visOptions(nodesIdSelection = TRUE)%>%
visInteraction(navigationButtons = TRUE)
)
q()
